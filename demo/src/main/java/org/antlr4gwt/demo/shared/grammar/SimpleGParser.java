// Generated from SimpleG.g4 by ANTLR 4.4

package org.antlr4gwt.demo.shared.grammar;
//This file had been generated by Antlr4.4 the desktop version

import org.antlr.v4.runtime.atn.*;
import org.antlr.v4.runtime.dfa.DFA;
import org.antlr.v4.runtime.*;
import org.antlr.v4.runtime.misc.*;
import org.antlr.v4.runtime.tree.*;
import java.util.List;
import java.util.Iterator;
import java.util.ArrayList;

@SuppressWarnings({"all", "warnings", "unchecked", "unused", "cast"})
public class SimpleGParser extends Parser {
	static { RuntimeMetaData.checkVersion("4.4", RuntimeMetaData.VERSION); }

	protected static final DFA[] _decisionToDFA;
	protected static final PredictionContextCache _sharedContextCache =
		new PredictionContextCache();
	public static final int
		LEFT_P=1, RIGHT_P=2, OP=3, STRING=4, WORD=5, NUMBER=6, WS=7;
	public static final String[] tokenNames = {
		"<INVALID>", "'('", "')'", "OP", "STRING", "WORD", "NUMBER", "WS"
	};
	public static final int
		RULE_root = 0, RULE_expr = 1, RULE_cell = 2, RULE_first_cell = 3;
	public static final String[] ruleNames = {
		"root", "expr", "cell", "first_cell"
	};

	@Override
	public String getGrammarFileName() { return "SimpleG.g4"; }

	@Override
	public String[] getTokenNames() { return tokenNames; }

	@Override
	public String[] getRuleNames() { return ruleNames; }

	@Override
	public String getSerializedATN() { return _serializedATN; }

	@Override
	public ATN getATN() { return _ATN; }

	public SimpleGParser(TokenStream input) {
		super(input);
		_interp = new ParserATNSimulator(this,_ATN,_decisionToDFA,_sharedContextCache);
	}
	public static class RootContext extends ParserRuleContext {
		public List<ExprContext> expr() {
			return getRuleContexts(ExprContext.class);
		}
		public ExprContext expr(int i) {
			return getRuleContext(ExprContext.class,i);
		}
		public RootContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_root; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SimpleGListener ) ((SimpleGListener)listener).enterRoot(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SimpleGListener ) ((SimpleGListener)listener).exitRoot(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SimpleGVisitor ) return ((SimpleGVisitor<? extends T>)visitor).visitRoot(this);
			else return visitor.visitChildren(this);
		}
	}

	public final RootContext root() throws RecognitionException {
		RootContext _localctx = new RootContext(_ctx, getState());
		enterRule(_localctx, 0, RULE_root);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(9); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				{
				setState(8); expr();
				}
				}
				setState(11); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << LEFT_P) | (1L << STRING) | (1L << WORD) | (1L << NUMBER))) != 0) );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ExprContext extends ParserRuleContext {
		public TerminalNode WORD() { return getToken(SimpleGParser.WORD, 0); }
		public CellContext cell() {
			return getRuleContext(CellContext.class,0);
		}
		public TerminalNode STRING() { return getToken(SimpleGParser.STRING, 0); }
		public TerminalNode NUMBER() { return getToken(SimpleGParser.NUMBER, 0); }
		public ExprContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_expr; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SimpleGListener ) ((SimpleGListener)listener).enterExpr(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SimpleGListener ) ((SimpleGListener)listener).exitExpr(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SimpleGVisitor ) return ((SimpleGVisitor<? extends T>)visitor).visitExpr(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ExprContext expr() throws RecognitionException {
		ExprContext _localctx = new ExprContext(_ctx, getState());
		enterRule(_localctx, 2, RULE_expr);
		try {
			setState(17);
			switch (_input.LA(1)) {
			case LEFT_P:
				enterOuterAlt(_localctx, 1);
				{
				setState(13); cell();
				}
				break;
			case NUMBER:
				enterOuterAlt(_localctx, 2);
				{
				setState(14); match(NUMBER);
				}
				break;
			case STRING:
				enterOuterAlt(_localctx, 3);
				{
				setState(15); match(STRING);
				}
				break;
			case WORD:
				enterOuterAlt(_localctx, 4);
				{
				setState(16); match(WORD);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CellContext extends ParserRuleContext {
		public ExprContext expr;
		public List<ExprContext> params = new ArrayList<ExprContext>();
		public List<ExprContext> expr() {
			return getRuleContexts(ExprContext.class);
		}
		public ExprContext expr(int i) {
			return getRuleContext(ExprContext.class,i);
		}
		public TerminalNode LEFT_P() { return getToken(SimpleGParser.LEFT_P, 0); }
		public First_cellContext first_cell() {
			return getRuleContext(First_cellContext.class,0);
		}
		public TerminalNode RIGHT_P() { return getToken(SimpleGParser.RIGHT_P, 0); }
		public CellContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_cell; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SimpleGListener ) ((SimpleGListener)listener).enterCell(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SimpleGListener ) ((SimpleGListener)listener).exitCell(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SimpleGVisitor ) return ((SimpleGVisitor<? extends T>)visitor).visitCell(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CellContext cell() throws RecognitionException {
		CellContext _localctx = new CellContext(_ctx, getState());
		enterRule(_localctx, 4, RULE_cell);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(19); match(LEFT_P);
			setState(20); first_cell();
			setState(21); ((CellContext)_localctx).expr = expr();
			((CellContext)_localctx).params.add(((CellContext)_localctx).expr);
			setState(25);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << LEFT_P) | (1L << STRING) | (1L << WORD) | (1L << NUMBER))) != 0)) {
				{
				{
				setState(22); ((CellContext)_localctx).expr = expr();
				((CellContext)_localctx).params.add(((CellContext)_localctx).expr);
				}
				}
				setState(27);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(28); match(RIGHT_P);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class First_cellContext extends ParserRuleContext {
		public TerminalNode OP() { return getToken(SimpleGParser.OP, 0); }
		public TerminalNode WORD() { return getToken(SimpleGParser.WORD, 0); }
		public CellContext cell() {
			return getRuleContext(CellContext.class,0);
		}
		public First_cellContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_first_cell; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SimpleGListener ) ((SimpleGListener)listener).enterFirst_cell(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SimpleGListener ) ((SimpleGListener)listener).exitFirst_cell(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SimpleGVisitor ) return ((SimpleGVisitor<? extends T>)visitor).visitFirst_cell(this);
			else return visitor.visitChildren(this);
		}
	}

	public final First_cellContext first_cell() throws RecognitionException {
		First_cellContext _localctx = new First_cellContext(_ctx, getState());
		enterRule(_localctx, 6, RULE_first_cell);
		try {
			setState(33);
			switch (_input.LA(1)) {
			case LEFT_P:
				enterOuterAlt(_localctx, 1);
				{
				setState(30); cell();
				}
				break;
			case OP:
				enterOuterAlt(_localctx, 2);
				{
				setState(31); match(OP);
				}
				break;
			case WORD:
				enterOuterAlt(_localctx, 3);
				{
				setState(32); match(WORD);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static final String _serializedATN =
		"\3\u0430\ud6d1\u8206\uad2d\u4417\uaef1\u8d80\uaadd\3\t&\4\2\t\2\4\3\t"+
		"\3\4\4\t\4\4\5\t\5\3\2\6\2\f\n\2\r\2\16\2\r\3\3\3\3\3\3\3\3\5\3\24\n\3"+
		"\3\4\3\4\3\4\3\4\7\4\32\n\4\f\4\16\4\35\13\4\3\4\3\4\3\5\3\5\3\5\5\5$"+
		"\n\5\3\5\2\2\6\2\4\6\b\2\2(\2\13\3\2\2\2\4\23\3\2\2\2\6\25\3\2\2\2\b#"+
		"\3\2\2\2\n\f\5\4\3\2\13\n\3\2\2\2\f\r\3\2\2\2\r\13\3\2\2\2\r\16\3\2\2"+
		"\2\16\3\3\2\2\2\17\24\5\6\4\2\20\24\7\b\2\2\21\24\7\6\2\2\22\24\7\7\2"+
		"\2\23\17\3\2\2\2\23\20\3\2\2\2\23\21\3\2\2\2\23\22\3\2\2\2\24\5\3\2\2"+
		"\2\25\26\7\3\2\2\26\27\5\b\5\2\27\33\5\4\3\2\30\32\5\4\3\2\31\30\3\2\2"+
		"\2\32\35\3\2\2\2\33\31\3\2\2\2\33\34\3\2\2\2\34\36\3\2\2\2\35\33\3\2\2"+
		"\2\36\37\7\4\2\2\37\7\3\2\2\2 $\5\6\4\2!$\7\5\2\2\"$\7\7\2\2# \3\2\2\2"+
		"#!\3\2\2\2#\"\3\2\2\2$\t\3\2\2\2\6\r\23\33#";
	public static final ATN _ATN =
		new ATNDeserializer().deserialize(_serializedATN.toCharArray());
	static {
		_decisionToDFA = new DFA[_ATN.getNumberOfDecisions()];
		for (int i = 0; i < _ATN.getNumberOfDecisions(); i++) {
			_decisionToDFA[i] = new DFA(_ATN.getDecisionState(i), i);
		}
	}
}